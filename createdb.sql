--What is the most common room type in NYC Airbnb listings?

SELECT COUNT(room_type) AS popular, room_type
FROM room_types
GROUP BY 2
ORDER BY 2;


--What is the average price of a listing by room type?

SELECT AVG(p.price) AS average_price, rt.room_type
FROM room_types rt
INNER JOIN prices p ON rt.listing_id = p.listing_id
GROUP BY rt.room_type
having rt.room_type = 'shared room'
ORDER BY average_price;


--Which borough has the highest average price per month?

SELECT borough, avg(price_per_month) AS avg_price
FROM prices
GROUP BY borough
ORDER BY avg_price;


--How many listings of each room type are in each borough?

SELECT COUNT(p.listing_id) AS total, p.borough, rt.room_type
FROM prices p
INNER JOIN room_types rt ON p.listing_id = rt.listing_id
GROUP BY p.borough, rt.room_type
ORDER BY total;


--How many listings in each room type category have a price of over $500 per night?

SELECT COUNT(p.listing_id) AS total, rt.room_type
FROM prices p
INNER JOIN room_types rt ON p.listing_id = rt.listing_id
WHERE p.price > 500
GROUP BY rt.room_type
ORDER BY total;


--What is the distribution of listing prices by neighborhood?

SELECT borough, min(price) AS min_price, max(price) AS max_price, avg(price) as avg_price
FROM prices p
GROUP BY borough
ORDER BY min_price, max_price, avg_price;


--What is the estimated amount of revenue generated by hosts in each borough?

SELECT p.borough, sum(p.price * r.booked_days_365) AS revenue
FROM prices p
INNER JOIN reviews r ON p.listing_id = r.listing_id
GROUP BY borough
ORDER BY revenue;


--What is the average price per month for listings in each neighborhood?

SELECT avg(p.price_per_month) AS avg_price, p.neighbourhood, rt.room_type
FROM prices p
INNER JOIN room_types rt ON p.listing_id = rt.listing_id
GROUP BY p.neighbourhood, rt.room_type
ORDER BY avg_price DESC;


--How many listings have no reviews?

SELECT COUNT(p.listing_id) AS qty
FROM prices p
INNER JOIN  reviews r ON p.listing_id = r.listing_id
WHERE r.number_of_reviews IS NULL
ORDER BY qty;


--How do the estimated book days correlate with the price of an Airbnb listing in New York City?

SELECT corr(r.booked_days_365, p.price) as correlation
FROM prices p
INNER JOIN reviews r ON p.listing_id = r.listing_id
ORDER BY correlation;


--What is the average price per room type for listings that have at least 100 reviews and are available more than 200 days a year?

SELECT rt.room_type, AVG(p.price) AS avg_price
FROM room_types rt
INNER JOIN prices p ON rt.listing_id = p.listing_id
INNER JOIN reviews r ON rt.listing_id = r.listing_id
WHERE r.number_of_reviews >= 100 
AND r.availability_365 > 200
GROUP BY 1;



--How many hosts have more than one listing, and what's the maximum number of listings by a single host name?

WITH h1 AS (
SELECT COUNT(host_name) AS host
FROM reviews
WHERE listing_id > 1
),
h2 AS (
SELECT MAX(count) AS max_number
FROM (
    SELECT host_name, COUNT(listing_id) AS count
    FROM reviews
    GROUP by host_name) AS counts
)

SELECT host, max_number
FROM h1, h2;


--Determine the top 5 hosts who have the highest price_per_month for their listings, 
--considering only hosts who have at least 10 listings.

WITH t1 AS(
    SELECT *
    FROM prices
    INNER JOIN reviews
    USING (listing_id)
    )
SELECT host_name, COUNT(DISTINCT listing_id) as listing, SUM(price_per_month) as total_price
FROM t1
GROUP BY 1
HAVING COUNT(listing_id) >=10
ORDER BY total_price DESC
LIMIT 5;


--Find the neighborhood(s) that have the highest variance in listing prices.

SELECT neighbourhood, VAR_POP(price) as price_variance
FROM prices
GROUP BY 1
ORDER BY 2 DESC;


--Calculate the average price_per_month for each neighborhood, taking into account only listings where the host 
--has a minimum_nights value that is higher than the average minimum_nights value across all listings.

WITH a1 AS (
    SELECT AVG(minimum_nights) as avg_nights
    FROM prices
    INNER JOIN reviews
    USING (listing_id))

SELECT p.neighbourhood, AVG(p.price_per_month) as avg_price_month
FROM prices p
INNER JOIN reviews r
on p.listing_id = r.listing_id
WHERE r.minimum_nights > (SELECT avg_nights FROM a1)
GROUP BY 1
ORDER BY 2 desc

